
timer0-UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4c  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000967  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <USART_INIT>:

void USART_SEND(unsigned char data){
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
  cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e2:	08 95       	ret

000000e4 <USART_RECEIVE>:
}

unsigned char USART_RECEIVE(){
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
  e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	88 23       	and	r24, r24
  ea:	e4 f7       	brge	.-8      	; 0xe4 <USART_RECEIVE>
	/* Get and return received data from buffer */
	return UDR0;
  ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  f0:	08 95       	ret

000000f2 <TIMER0_DELAY>:

void TIMER0_DELAY(){
	
	for(uint16_t i=0;i<62700;i++){
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0b c0       	rjmp	.+22     	; 0x10e <TIMER0_DELAY+0x1c>
		TCCR0A=0x00;
  f8:	14 bc       	out	0x24, r1	; 36
		TCCR0B=0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 bd       	out	0x25, r24	; 37
		TCNT0=0x00;
  fe:	16 bc       	out	0x26, r1	; 38
		while((TIFR0 & (1<<TOV0))==0);
 100:	a8 9b       	sbis	0x15, 0	; 21
 102:	fe cf       	rjmp	.-4      	; 0x100 <TIMER0_DELAY+0xe>
		TIFR0 |=(1<<TOV0);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bb       	out	0x15, r24	; 21
	return UDR0;
}

void TIMER0_DELAY(){
	
	for(uint16_t i=0;i<62700;i++){
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	2c 3e       	cpi	r18, 0xEC	; 236
 110:	84 ef       	ldi	r24, 0xF4	; 244
 112:	38 07       	cpc	r19, r24
 114:	88 f3       	brcs	.-30     	; 0xf8 <TIMER0_DELAY+0x6>
		TCNT0=0x00;
		while((TIFR0 & (1<<TOV0))==0);
		TIFR0 |=(1<<TOV0);
	}

}
 116:	08 95       	ret

00000118 <main>:

int main(void)
{	
	DDRB=0xff;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 b9       	out	0x04, r24	; 4
	PORTB=0xFF;
 11c:	85 b9       	out	0x05, r24	; 5
	char data='T';
	
	USART_INIT();
 11e:	0e 94 66 00 	call	0xcc	; 0xcc <USART_INIT>
    /* Replace with your application code */
    while (1) 
    {
		
		data=USART_RECEIVE();
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <USART_RECEIVE>
		
		if(data == 'B'){
 126:	82 34       	cpi	r24, 0x42	; 66
 128:	91 f4       	brne	.+36     	; 0x14e <main+0x36>
			while(1){
				TIMER0_DELAY();
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER0_DELAY>
				PORTB=0x00;
 12e:	15 b8       	out	0x05, r1	; 5
				TIMER0_DELAY();;
 130:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER0_DELAY>
				PORTB=0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	85 b9       	out	0x05, r24	; 5
				data=USART_RECEIVE();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <USART_RECEIVE>
				if(data == 'T'){
 13c:	84 35       	cpi	r24, 0x54	; 84
 13e:	19 f4       	brne	.+6      	; 0x146 <main+0x2e>
					PORTB=0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	85 b9       	out	0x05, r24	; 5
					break;
 144:	ee cf       	rjmp	.-36     	; 0x122 <main+0xa>
				}else if (data == 'F'){
 146:	86 34       	cpi	r24, 0x46	; 70
 148:	81 f7       	brne	.-32     	; 0x12a <main+0x12>
					PORTB=0x00;
 14a:	15 b8       	out	0x05, r1	; 5
					break;
 14c:	ea cf       	rjmp	.-44     	; 0x122 <main+0xa>
				}
			}
				
		}
		else if(data =='T')PORTB=0xff;
 14e:	84 35       	cpi	r24, 0x54	; 84
 150:	19 f4       	brne	.+6      	; 0x158 <main+0x40>
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	85 b9       	out	0x05, r24	; 5
 156:	e5 cf       	rjmp	.-54     	; 0x122 <main+0xa>
		else if(data == 'F')PORTB=0x00;
 158:	86 34       	cpi	r24, 0x46	; 70
 15a:	19 f7       	brne	.-58     	; 0x122 <main+0xa>
 15c:	15 b8       	out	0x05, r1	; 5
 15e:	e1 cf       	rjmp	.-62     	; 0x122 <main+0xa>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
